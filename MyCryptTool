/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author tjorven
 */


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import java.util.Random;
import java.util.ArrayList; 

public class MyCryptTool extends javax.swing.JFrame implements ActionListener {

    String clear;
    String cypher = "";
    String choice = "";
    

    /**
     * Creates new form MyCryptTool
     */
    public MyCryptTool() {
        initComponents();

        jbCaesar.addActionListener(this);
        jbEncrypt.addActionListener(this);
        jbDecrypt.addActionListener(this);
        jbClear.addActionListener(this);
        jbVigenere.addActionListener(this);
        jbSatz_Chiffre.addActionListener(this);
        jbSkytale.addActionListener(this);
        jbRückwärts.addActionListener(this);
        jbInfo.addActionListener(this);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfClear = new javax.swing.JTextField();
        tfCypher = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jbEncrypt = new javax.swing.JButton();
        jbDecrypt = new javax.swing.JButton();
        jbClear = new javax.swing.JButton();
        tfChoice = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jbVigenere = new javax.swing.JButton();
        jbCaesar = new javax.swing.JButton();
        jbSatz_Chiffre = new javax.swing.JButton();
        jbSkytale = new javax.swing.JButton();
        jbRückwärts = new javax.swing.JButton();
        jbInfo =      new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tfClear.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        tfCypher.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Klartext");
        jLabel1.setToolTipText("");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Verschlüsselung");

        jbEncrypt.setText("Encrypt");

        jbDecrypt.setText("Decrypt");

        jbClear.setText("Clear");

        tfChoice.setEditable(false);
        tfChoice.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel3.setText("Auswahl");

        jbVigenere.setText("Vigenere");

        jbCaesar.setText("Caesar");

        jbSatz_Chiffre.setText("CM-Bifid");

        jbSkytale.setText("Skytale");

        jbRückwärts.setText("Switch");
        jbInfo.setText("Info An/Aus");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbSkytale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tfChoice))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbVigenere, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbCaesar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbSatz_Chiffre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbRückwärts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbEncrypt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbDecrypt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(384, 384, 384)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(362, 362, 362)
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tfClear, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(745, 745, 745)
                                    .addComponent(jbClear)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(tfCypher, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jbVigenere, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbCaesar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbSatz_Chiffre, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfClear, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, 0)
                        .addComponent(jbSkytale, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent( jbRückwärts, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfCypher, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbClear)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyCryptTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyCryptTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyCryptTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyCryptTool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyCryptTool().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbSatz_Chiffre;
    private javax.swing.JButton jbSkytale;
    private javax.swing.JButton jbRückwärts;
    private javax.swing.JButton jbInfo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton jbCaesar;
    private javax.swing.JButton jbClear;
    private javax.swing.JButton jbDecrypt;
    private javax.swing.JButton jbEncrypt;
    private javax.swing.JButton jbVigenere;
    private javax.swing.JTextField tfChoice;
    private javax.swing.JTextField tfClear;
    private javax.swing.JTextField tfCypher;
    // End of variables declaration//GEN-END:variables

    private String caesar_Crypt(int key, String s) {
        String result = "";
        for (int i = 0; i < s.length(); i++) {
                        char helper = s.charAt(i);
                        result += (char) (((((int) helper - 65) + key) % 26) + 65);
                    }
        return result;
    }
    private String Vigenere_Crypt(String key_s, String s, boolean encrypt) {
        String result = "";
        for (int i = 0; i < s.length(); i++) {
                        int key_position = i%key_s.length();
                        
                        int key = ((int) key_s.charAt(key_position)-48-17);
                        
                        
                        if(encrypt==true) {   
                            char helper = s.charAt(i);
                            
                            result += (char) (((((int) helper - 65) + key) % 26) + 65);
                           
                        }
                        
                        else{
                            char helper = s.charAt(i);
                            //System.out.println("Char"+helper);
                            result += (char) (((((int) helper - 65) - key+26) % 26) + 65);
                            //System.out.println("Result"+result);
                        }
                    }
        
        return result;
    }
    private String Skytale_EnCrypt(String s, String key){
        String result="";
        Random rand = new Random(); 
        
         for (int i = 0; i < s.length(); i++) {
             int key_position = i%key.length();
             int key_num = ((int) key.charAt(key_position)-48);
             
              result = result + s.charAt(i) ;
            for (int j = 0; j < key_num; j++) {
                int int_help=  rand.nextInt(26)+65 ;
                char help = (char) int_help;
                
                result = result + help ;
            
            }
        
        }
         return result;
    }
    private String Skytale_DeCrypt(String key, String s){
       String result="";
       ArrayList<String> Buchstaben = new ArrayList<String>(); 
       
       for (int i = 0; i < s.length(); i++) {
            Buchstaben.add(""+s.charAt(i));
       }
       
       int j=0;
       
       while (Buchstaben.size() >0){
           
           int key_position = j%key.length();
           int key_num = ((int) key.charAt(key_position)-48);
            
           result=result+Buchstaben.get(0);
           Buchstaben.remove(0);
           
           
           for (int i = 0; i < key_num; i++) {
                if (Buchstaben.size() >0){
               Buchstaben.remove(0);
           }}
          
           j++;
          
       }
        return result;
    
    }
    private String Switch_EN(String s){
        String result="";
        ArrayList<String> Buchstaben = new ArrayList<String>(); 
        for (int i = 0; i < s.length(); i++) {
            Buchstaben.add(""+s.charAt(i));
        }
        
        
        while (Buchstaben.size() >0){
            result = result + Buchstaben.get(0);
            Buchstaben.remove(0);
             if (Buchstaben.size() >0){
                result = result + Buchstaben.get(Buchstaben.size()-1);
                Buchstaben.remove(Buchstaben.size()-1);
                 }
            
        
        }
        
    return result;
    
    
    
    }
    private String Switch_DE(String s){
        String result="";
        String help="";
        
         for (int i = 0; i < s.length(); i++) {
             if (i%2==0){
                 result = result+s.charAt(i);
             }
             else {
                 help =s.charAt(i)+help;
             }  
                
         }
         
         result = result+help;
        
        
        
    return result;
    
    
    
    }
    private char[][] CM_Bifid_Chiffre_String_to_Matrix( String key1){
   
    String helper_key ="";
    String helper_key_ohne_j ="";
    
        
    for (int i = 0; i < key1.length(); i++) {// entfehrnt doppelte buchstaben im key
        
            boolean existiert = false;
            for (int j = 0; j < helper_key.length(); j++) {
                if ((key1.charAt(i) == helper_key.charAt(j) )){
                    existiert =true;
                }
            }
            if (existiert== false) {
            helper_key = helper_key+key1.charAt(i);
        }   
    }
        
    
    
    
    for (int i = 65; i < 91; i++) {//fügt alle buchstaben hinzu die noch nicht existieren 
            boolean existiert = false;
            for (int j = 0; j < helper_key.length(); j++) {// geht über den key drüber und schaut ob der char schoon existiert 
                if ((helper_key.charAt(j) == (char)i )){
                    existiert =true;
                }  
            }
            if (existiert== false) {
            helper_key = helper_key+ (char) i;
            }
    }
        
        
        for (int i = 0; i < helper_key.length(); i++) {// Entfernt j (i und j sind in i zusammengelegt )
            if (helper_key.charAt(i)!= 'J') {
                
           helper_key_ohne_j = helper_key_ohne_j+helper_key.charAt(i);
            
            }
        }
        
    
    char[][] Tafel_1 = new char [5][5];// Wird in Tafel gepackt 
    
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                Tafel_1[i][j] = helper_key_ohne_j.charAt((i*5)+j);
                }
            
        }
     return Tafel_1;
     
       
    }
    private String CM_Bifid_Chiffre(String s,String key1,String key2) {
        String s1="";
        for (int i = 0; i < s.length(); i++) {// Entfernt j (i und j sind in i zusammengelegt )
            if (s.charAt(i)!= 'J') {
                
           s1 = s1+s.charAt(i);
            
            }
            else{s1 = s1+'I';}
        }
        s=s1;
        
         String result="";
         String I ="";
         String J ="";
         String Zwischen_Matrix_num="";
         
         
         char[][] Matrix_1 = new char [5][5];
         char[][] Matrix_2 = new char [5][5];
         
         
         
         Matrix_1 = CM_Bifid_Chiffre_String_to_Matrix(key1);
         Matrix_2 = CM_Bifid_Chiffre_String_to_Matrix(key2);
         
        
        for (int k = 0; k < s.length(); k++) {
            
        char help = s.charAt(k);
            
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
               
                if ((int)(Matrix_1[i][j])==(int)help) {
                    
                    char help_i =(char)(i+48);
                    char help_j =(char)(j+48);
                    I=I+(help_i);
                    J=J+(help_j);
                    
         
                    
                }
            }
            
        }
         
        
        }
         
         Zwischen_Matrix_num = I + J;
         
         
         
         
         
         
         
         
         
         
         
         for (int i = 0; i < Zwischen_Matrix_num.length();i= i+2) {
             result = result+Matrix_2[Zwischen_Matrix_num.charAt(i)-48][(Zwischen_Matrix_num.charAt(i+1)-48)];
             
                    
        }
         
         return result;
    }
    private String CM_Bifid_Chiffre_DE(String s,String key1,String key2) {
        String s1="";
        for (int i = 0; i < s.length(); i++) {// Entfernt j (i und j sind in i zusammengelegt )
            if (s.charAt(i)!= 'J') {
                
           s1 = s1+s.charAt(i);
            
            }
            else{s1 = s1+'I';}
        }
        s=s1;
        
         String result="";
         String I ="";
         String J ="";
         String Zwischen_Matrix_num="";
         
         
         char[][] Matrix_2 = new char [5][5];
         char[][] Matrix_1 = new char [5][5];
         
         
         
         Matrix_1 = CM_Bifid_Chiffre_String_to_Matrix(key1);
         Matrix_2 = CM_Bifid_Chiffre_String_to_Matrix(key2);
         
        
        for (int k = 0; k < s.length(); k++) {
            
        char help = s.charAt(k);
            
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
               
                if ((int)(Matrix_2[i][j])==(int)help) {
                    
                    char help_i =(char)(i+48);
                    char help_j =(char)(j+48);
                    I=I+(help_i)+(help_j);
                    
                    
         
                    
                }
            }
            
        }
         
        
        }
         
         Zwischen_Matrix_num = I + J;
         String Erste_hälfte="";
         String Zweite_hälfte="";
         
         
         for (int i = 0; i < I.length()/2; i++) {
            Erste_hälfte=Erste_hälfte+I.charAt(i);
            
         }
         for (int i = I.length()/2; i < I.length(); i++) {
            Zweite_hälfte=Zweite_hälfte+I.charAt(i);
        }
         
         
         
         
         
         
         
         
         
         
         
         for (int i = 0; i < Zweite_hälfte.length();i++) {
             result = result+Matrix_1[Erste_hälfte.charAt(i)-48][(Zweite_hälfte.charAt(i)-48)];
            
                    
        }
         
         return result;
    }
    
    int GlobaleVariable = 2;
    
    
    @Override
   
    public void actionPerformed(ActionEvent e) {
         
        if (e.getSource() == jbInfo) {
           GlobaleVariable = GlobaleVariable+1 ;
           
            
            }
        if (e.getSource() == jbCaesar) {
            choice = "Caesar";
            tfChoice.setText(choice);
            
           
            if (GlobaleVariable%2==0){
            JOptionPane.showMessageDialog(null,"<html> Bei der Caesar Verschlüsselung handelt es sich um eine <br>"
                    + "Substitutionschiffre, da jedes Zeichen des Klartextes durch ein anderes ersetzt wird.<br>"
                    + " Es ist zudem monoalphabetisch, da die Buchstaben immer einheitlich verschoben werden <br>"
                    + "und somit jeder Klartextzeichen auf das gleiche Geheimtextzeichen abgebildet wird.<br><html> ","Caesar Info",JOptionPane.PLAIN_MESSAGE);
        }
        }
            if (e.getSource() == jbVigenere) {
            choice = "Vigenere";
            tfChoice.setText(choice);
            if (GlobaleVariable%2==0){
            JOptionPane.showMessageDialog(null, "<html>Bei der Vigenere Verschlüsselung handelt es sich um eine "
                    + "Substitutionschiffre, <br>da jedes Zeichen des Klartextes durch ein anderes ersetzt wird."
                    + " Zudem ist es polyalphabetisch, <br>da nicht jedes Klartextzeichen auf das gleiche Geheimtextzeichen"
                    + " abgebildet wird.<html>","Vigenere Info", JOptionPane.PLAIN_MESSAGE);}
        }
        if (e.getSource() == jbSatz_Chiffre) {
            choice = "Satz_Chiffre";
            tfChoice.setText(choice);
            if (GlobaleVariable%2==0){
            JOptionPane.showMessageDialog(null, "<html>Die CM-Bifid Verschlüsselung beinhaltet eine Transpositionschiffre "
                    + "und eine polyalphabetische  Substitutionschiffre. <br> Es werden die Buchstaben im ersten Schritt "
                    + "in Koordinaten kodiert und hinter einander geschrieben.  <br>   Im zweiten Schritt wird diese Ziffernreihe"
                    + " aufgespalten in 2 Reihen, <br> die Ziffern an ungerader Position (also die 1., 3., 5 usw.)"
                    + " werden in die erste neue Reihe aufgenommen, <br> die an gerader Position (2., 4., 6. usw.) in die Zweite."
                    + " Dann werden die Reihen wieder zusammen gefügt.<br>Nun werden von vorne die Ziffern wieder als Koordinaten entnommen und über eine"
                    + " zweite Matrix zurück in Buchstaben umgewandelt.  <html>", "CM-Bifid Info", JOptionPane.PLAIN_MESSAGE);
        
        
        
        
            }
        
        
        }
        if (e.getSource() == jbSkytale) {
            choice = "Skytale";
            tfChoice.setText(choice);
            if (GlobaleVariable%2==0){
            JOptionPane.showMessageDialog(null, "<html>Bei Skytale handelt es sich um die eine Transpositionschiffre,<br>"
                    + " da die Zeichen gleich bleiben und durch eingefügte Zeichen, sich nur der Index dieser im"
                    + " Geheimtext ändert.<html>", "Skytale Info", JOptionPane.PLAIN_MESSAGE);
        }
        }
        if (e.getSource() == jbRückwärts) {
            choice = "Switch";
            tfChoice.setText(choice);
            if (GlobaleVariable%2==0){
            JOptionPane.showMessageDialog(null, "<html>Bei der Switch Verschlüsselung wird die Reihenfolge der Buchstaben geändert, "
                    + "wobei die Zeichen gleich bleiben.<br>" 
                    +"Somit handelt es sich um eine Transpositionschiffre." 
                    +"(Dieses Verfahren basiert auf dem Schema: <br>Erster Buchstabe, letzter Buchstabe, 2. Buchstabe, vorletzter"
                    + " Buchstabe usw.)<html>", "Switch Info", JOptionPane.PLAIN_MESSAGE);
            }
        }
        

        if (e.getSource() == jbEncrypt) {
            clear = tfClear.getText();
            if (clear.length() > 0) {
                clear = clear.toUpperCase();
                tfClear.setText(clear);if (choice.equals("Caesar")) {
                    int key;
                    key = Integer.parseInt(JOptionPane.showInputDialog(this, null, "Verschiebung", JOptionPane.NO_OPTION));
                    tfCypher.setText(caesar_Crypt( key, clear));
                }
                else if (choice.equals("Vigenere")){
                    String key_s;
                    key_s = (JOptionPane.showInputDialog(this, null, "Code Wort", JOptionPane.NO_OPTION));
                    tfCypher.setText(Vigenere_Crypt( key_s.toUpperCase(), clear, true)); }
                
                else if (choice.equals("Satz_Chiffre")){
                    
                   String key_1;
                   
                    key_1 = (JOptionPane.showInputDialog(this, null, "Code Wort 1", JOptionPane.NO_OPTION));
                    String key_2;
                   
                    key_2 = (JOptionPane.showInputDialog(this, null, "Code Wort 2", JOptionPane.NO_OPTION));
                    
                    tfCypher.setText(CM_Bifid_Chiffre(  clear.toUpperCase(), key_1.toUpperCase(),key_2.toUpperCase()));
                    }
                
                else if (choice.equals("Skytale")){
                    String key;key = (JOptionPane.showInputDialog(this, null, "Verschiebung", JOptionPane.NO_OPTION));
                    tfCypher.setText(Skytale_EnCrypt( clear,key));
                  }
                 else if (choice.equals("Switch")){
                    tfCypher.setText(Switch_EN(  clear));
                 }
               }
        }
        if (e.getSource() == jbDecrypt) {
            cypher = tfCypher.getText();
            if (cypher.length() > 0) {
                cypher = cypher.toUpperCase();
                tfCypher.setText(cypher);
                
                
                if (choice.equals("Caesar")) {
                    int key;
                    key = Integer.parseInt(JOptionPane.showInputDialog(this, null, "Verschiebung (int)", JOptionPane.NO_OPTION));
                    tfClear.setText(caesar_Crypt( 26-key, cypher));
                }
                else if (choice.equals("Vigenere")){
                    String key_s;
                    key_s = (JOptionPane.showInputDialog(this, null, "Code Wort (String) ", JOptionPane.NO_OPTION));
                    
                    tfClear.setText(Vigenere_Crypt( key_s.toUpperCase(), cypher, false));  
                }
                
                
                
                
                else if (choice.equals("Skytale")){
                    String key_s;
                    key_s = (JOptionPane.showInputDialog(this, null, "Verschiebung (int)", JOptionPane.NO_OPTION));
                    
                    tfClear.setText(Skytale_DeCrypt( key_s, cypher));
                    
                    
                }
                
                
                
                else if (choice.equals("Satz_Chiffre")){
                    String key_1="";
                    key_1 = (JOptionPane.showInputDialog(this, null, "Code Wort 1", JOptionPane.NO_OPTION));
                    String key_2="";
                    key_2 = (JOptionPane.showInputDialog(this, null, "Code Wort 2", JOptionPane.NO_OPTION));
                  
                    
                    tfClear.setText(CM_Bifid_Chiffre_DE( cypher,key_1.toUpperCase(),key_2.toUpperCase() ));
                       
                    
                }
                else if (choice.equals("Switch")){
                    tfClear.setText(Switch_DE(  cypher)); 
                }
               
                
            }
        }
        
       
        if (e.getSource() == jbClear) {
            clear = "";
            cypher= "";
            choice="";
            tfChoice.setText("");
            tfClear.setText("");
            tfCypher.setText("");
        }
    }
}
